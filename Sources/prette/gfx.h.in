#ifndef PRT_GFX_H
#define PRT_GFX_H

#include "prette/common.h"
#ifdef OS_IS_OSX

#define GL_SILENCE_DEPRECATION 1
#include <OpenGL/gl3.h>
#include <OpenGL/gl3ext.h>

#else

#include <glew.h>
#include <GL/gl3.h>

#endif // OS_IS_OSX

#define GLFW_INCLUDE_NONE
#include <GLFW/glfw3.h>

#include <units.h>
#include <iostream>
#include <glog/logging.h>

#include "prette/glm.h"
#include "prette/gfx_error.h"
#include "prette/gfx_debug.h"
#include "prette/gfx_misc.h"

#include <semver/semver.hpp>

#define PRT_GLFW_CTX_VERSION_MAJOR @PROJECT_GLFW_CONTEXT_VERSION_MAJOR@
#define PRT_GLFW_CTX_VERSION_MINOR @PROJECT_GLFW_CONTEXT_VERSION_MINOR@

#ifdef M_PI
#define PI M_PI
#endif //M_PI

#ifndef PI
#define PI 3.141592654
#endif //PI

namespace prt::gfx {
  void Init();

  static inline semver::version
  GetGlfwVersion() {
    return semver::version(GLFW_VERSION_MAJOR, GLFW_VERSION_MINOR, GLFW_VERSION_REVISION);
  }

  static inline std::string
  GetGlVersionString() {
    return (const char*) glGetString(GL_VERSION);
  }

  static inline std::string
  GetGlslVersionString() {
    return (const char*) glGetString(GL_SHADING_LANGUAGE_VERSION);
  }

  static inline semver::version
  GetGlslVersion() {
    return semver::version::parse(GetGlslVersionString(), false);
  }

#ifndef OS_IS_OSX
  static inline semver::version
  GetGlewVersion() {
    const auto glewVersion = (const char*) glewGetString(GLEW_VERSION);
    return semver::version::parse(glewVersion);
  }
#endif //OS_IS_OSX

  static inline std::string
  GetGlVendorString() {
    return (const char*) glGetString(GL_VENDOR);
  }

  static inline std::string
  GetGlRendererString() {
    return (const char*) glGetString(GL_RENDERER);
  }
}

#endif //PRT_GFX_H